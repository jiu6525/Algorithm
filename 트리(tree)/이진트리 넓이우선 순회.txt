class ArrayQueue:

    def __init__(self):
        self.data = []

    def size(self):
        return len(self.data)

    def isEmpty(self):
        return self.size() == 0

    def enqueue(self, item):
        self.data.append(item)

    def dequeue(self):
        return self.data.pop(0)

    def peek(self):
        return self.data[0]


class Node:

    def __init__(self, item):
        self.data = item
        self.left = None
        self.right = None


class BinaryTree:

    def __init__(self, r):
        self.root = r


    def bft(self):  #넓이우선 순회
        result = []
        q = ArrayQueue()    
        if self.root:   #비어있는 트리가 아니라면 큐에 루트값 추가
            q.enqueue(self.root)
        
        while not q.isEmpty():  #큐가 비어있을때가지 반복
            node = q.dequeue()  #큐에서 노드를 꺼내서 변수 node에 저장 
                                #반복문을 수행하면서 노드값 최신화
            result.append(node.data) #노드의 데이더를 결과값에 저장
            if node.left:               #만약 노드의 left가 있다면
                q.enqueue(node.left)    #큐에 노드의 left 위치 저장
            if node.right:              #노드의 right가 있다면
                q.enqueue(node.right)   #큐에 노드의 rifgt 위치 저장
        return result
        

def solution(x):
    return 0

#이진트리 넓이우선 순회